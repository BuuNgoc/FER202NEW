{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\FER202\\\\Slot11\\\\lab-3\\\\src\\\\QuizApp.js\";\nimport React, { Component } from 'react';\nimport Question from './Question';\nimport Score from './Score';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass QuizApp extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAnswer = selected => {\n      const {\n        questions,\n        currentQuestion,\n        score\n      } = this.state;\n      const isCorrect = selected === questions[currentQuestion].answer;\n      this.setState({\n        score: isCorrect ? score + 1 : score,\n        currentQuestion: currentQuestion + 1\n      }, () => {\n        if (this.state.currentQuestion >= questions.length) {\n          this.setState({\n            quizEnd: true\n          });\n        }\n      });\n    };\n    this.handleReplay = () => {\n      this.setState({\n        currentQuestion: 0,\n        score: 0,\n        quizEnd: false\n      });\n    };\n    this.state = {\n      questions: [{\n        id: 1,\n        question: 'What is the capital of France?',\n        options: ['Paris', 'London', 'Berlin', 'Madrid'],\n        answer: 'Paris'\n      }, {\n        id: 2,\n        question: 'What is the largest planet in our solar system?',\n        options: ['Jupiter', 'Saturn', 'Mars', 'Earth'],\n        answer: 'Jupiter'\n      }, {\n        id: 3,\n        question: 'What is the capital of Germany?',\n        options: ['Berlin', 'Paris', 'London', 'Madrid'],\n        answer: 'Berlin'\n      }, {\n        id: 4,\n        question: 'What is the capital of Japan?',\n        options: ['Tokyo', 'Beijing', 'Seoul', 'Bangkok'],\n        answer: 'Tokyo'\n      }],\n      currentQuestion: 0,\n      score: 0,\n      quizEnd: false\n    };\n  }\n  render() {\n    const {\n      questions,\n      currentQuestion,\n      score,\n      quizEnd\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !quizEnd && currentQuestion < questions.length ? /*#__PURE__*/_jsxDEV(Question, {\n        question: questions[currentQuestion].question,\n        options: questions[currentQuestion].options,\n        qid: currentQuestion + 1,\n        onAnswer: this.handleAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Score, {\n        score: score,\n        total: questions.length,\n        onReplay: this.handleReplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default QuizApp;","map":{"version":3,"names":["React","Component","Question","Score","jsxDEV","_jsxDEV","QuizApp","constructor","props","handleAnswer","selected","questions","currentQuestion","score","state","isCorrect","answer","setState","length","quizEnd","handleReplay","id","question","options","render","children","qid","onAnswer","fileName","_jsxFileName","lineNumber","columnNumber","total","onReplay"],"sources":["C:/Users/ASUS/FER202/Slot11/lab-3/src/QuizApp.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Question from './Question';\r\nimport Score from './Score';\r\n\r\nclass QuizApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions: [\r\n        {\r\n          id: 1,\r\n          question: 'What is the capital of France?',\r\n          options: ['Paris', 'London', 'Berlin', 'Madrid'],\r\n          answer: 'Paris',\r\n        },\r\n        {\r\n          id: 2,\r\n          question: 'What is the largest planet in our solar system?',\r\n          options: ['Jupiter', 'Saturn', 'Mars', 'Earth'],\r\n          answer: 'Jupiter',\r\n        },\r\n        {\r\n          id: 3,\r\n          question: 'What is the capital of Germany?',\r\n          options: ['Berlin', 'Paris', 'London', 'Madrid'],\r\n          answer: 'Berlin',\r\n        },\r\n        {\r\n          id: 4,\r\n          question: 'What is the capital of Japan?',\r\n          options: ['Tokyo', 'Beijing', 'Seoul', 'Bangkok'],\r\n          answer: 'Tokyo',\r\n        },\r\n        \r\n      ],\r\n      currentQuestion: 0,\r\n      score: 0,\r\n      quizEnd: false,\r\n    };\r\n  }\r\n\r\n  handleAnswer = (selected) => {\r\n    const { questions, currentQuestion, score } = this.state;\r\n    const isCorrect = selected === questions[currentQuestion].answer;\r\n    this.setState({\r\n      score: isCorrect ? score + 1 : score,\r\n      currentQuestion: currentQuestion + 1,\r\n    }, () => {\r\n      if (this.state.currentQuestion >= questions.length) {\r\n        this.setState({ quizEnd: true });\r\n      }\r\n    });\r\n  };\r\n\r\n  handleReplay = () => {\r\n    this.setState({\r\n      currentQuestion: 0,\r\n      score: 0,\r\n      quizEnd: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { questions, currentQuestion, score, quizEnd } = this.state;\r\n    return (\r\n      <div>\r\n        {!quizEnd && currentQuestion < questions.length ? (\r\n          <Question\r\n            question={questions[currentQuestion].question}\r\n            options={questions[currentQuestion].options}\r\n            qid={currentQuestion + 1}\r\n            onAnswer={this.handleAnswer}\r\n          />\r\n        ) : (\r\n          <Score score={score} total={questions.length} onReplay={this.handleReplay} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}